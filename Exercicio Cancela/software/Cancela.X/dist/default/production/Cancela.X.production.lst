

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Feb 12 19:23:07 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172                           
   173                           	psect	nvBANK0
   174  002D                     __pnvBANK0:
   175  002D                     _trem_passando:
   176  002D                     	ds	2
   177  0007                     _PORTC	set	7
   178  0006                     _PORTB	set	6
   179  000B                     _INTCONbits	set	11
   180  0007                     _PORTCbits	set	7
   181  0059                     _INTF	set	89
   182  0087                     _TRISC	set	135
   183  0086                     _TRISB	set	134
   184  0081                     _OPTION_REGbits	set	129
   185                           
   186                           	psect	cinit
   187  000F                     start_initialization:	
   188                           ; #config settings
   189                           
   190  000F                     __initialization:
   191                           
   192                           ; Clear objects allocated to BANK0
   193  000F  1283               	bcf	3,5	;RP0=0, select bank0
   194  0010  1303               	bcf	3,6	;RP1=0, select bank0
   195  0011  01AF               	clrf	__pbssBANK0& (0+127)
   196  0012  01B0               	clrf	(__pbssBANK0+1)& (0+127)
   197  0013                     end_of_initialization:	
   198                           ;End of C runtime variable initialization code
   199                           
   200  0013                     __end_of__initialization:
   201  0013  0183               	clrf	3
   202  0014  120A  118A  2817   	ljmp	_main	;jump to C main() function
   203                           
   204                           	psect	bssBANK0
   205  002F                     __pbssBANK0:
   206  002F                     _SA_press:
   207  002F                     	ds	2
   208                           
   209                           	psect	cstackCOMMON
   210  0070                     __pcstackCOMMON:
   211  0070                     ?_rotateMotor:
   212  0070                     ?_stopMotor:	
   213                           ; 1 bytes @ 0x0
   214                           
   215  0070                     ?_tremInterruption:	
   216                           ; 1 bytes @ 0x0
   217                           
   218  0070                     ?_main:	
   219                           ; 1 bytes @ 0x0
   220                           
   221  0070                     ?i1_rotateMotor:	
   222                           ; 1 bytes @ 0x0
   223                           
   224  0070                     ??i1_rotateMotor:	
   225                           ; 1 bytes @ 0x0
   226                           
   227  0070                     ?i1_stopMotor:	
   228                           ; 1 bytes @ 0x0
   229                           
   230  0070                     ??i1_stopMotor:	
   231                           ; 1 bytes @ 0x0
   232                           
   233                           
   234                           ; 1 bytes @ 0x0
   235  0070                     	ds	2
   236  0072                     i1_rotateMotor$115:
   237                           
   238                           ; 1 bytes @ 0x2
   239  0072                     	ds	1
   240  0073                     i1_rotateMotor$117:
   241                           
   242                           ; 1 bytes @ 0x3
   243  0073                     	ds	1
   244  0074                     i1rotateMotor@abrindo:
   245                           
   246                           ; 2 bytes @ 0x4
   247  0074                     	ds	2
   248  0076                     i1rotateMotor@fechando:
   249                           
   250                           ; 2 bytes @ 0x6
   251  0076                     	ds	2
   252  0078                     i1rotateMotor@direction:
   253                           
   254                           ; 1 bytes @ 0x8
   255  0078                     	ds	1
   256  0079                     ??_tremInterruption:
   257                           
   258                           ; 1 bytes @ 0x9
   259  0079                     	ds	2
   260                           
   261                           	psect	cstackBANK0
   262  0020                     __pcstackBANK0:
   263  0020                     ??_rotateMotor:
   264  0020                     ??_stopMotor:	
   265                           ; 1 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269  0020                     	ds	2
   270  0022                     _rotateMotor$115:
   271                           
   272                           ; 1 bytes @ 0x2
   273  0022                     	ds	1
   274  0023                     _rotateMotor$117:
   275                           
   276                           ; 1 bytes @ 0x3
   277  0023                     	ds	1
   278  0024                     rotateMotor@abrindo:
   279                           
   280                           ; 2 bytes @ 0x4
   281  0024                     	ds	2
   282  0026                     rotateMotor@fechando:
   283                           
   284                           ; 2 bytes @ 0x6
   285  0026                     	ds	2
   286  0028                     rotateMotor@direction:
   287                           
   288                           ; 1 bytes @ 0x8
   289  0028                     	ds	1
   290  0029                     ??_main:
   291                           
   292                           ; 1 bytes @ 0x9
   293  0029                     	ds	2
   294  002B                     main@i:
   295                           
   296                           ; 2 bytes @ 0xB
   297  002B                     	ds	2
   298                           
   299                           	psect	maintext
   300  0017                     __pmaintext:	
   301 ;;
   302 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   303 ;;
   304 ;; *************** function _main *****************
   305 ;; Defined at:
   306 ;;		line 67 in file "main.c"
   307 ;; Parameters:    Size  Location     Type
   308 ;;		None
   309 ;; Auto vars:     Size  Location     Type
   310 ;;  i               2   11[BANK0 ] int 
   311 ;; Return value:  Size  Location     Type
   312 ;;                  1    wreg      void 
   313 ;; Registers used:
   314 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   315 ;; Tracked objects:
   316 ;;		On entry : B00/0
   317 ;;		On exit  : 0/0
   318 ;;		Unchanged: 0/0
   319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   320 ;;      Params:         0       0       0       0       0
   321 ;;      Locals:         0       2       0       0       0
   322 ;;      Temps:          0       2       0       0       0
   323 ;;      Totals:         0       4       0       0       0
   324 ;;Total ram usage:        4 bytes
   325 ;; Hardware stack levels required when called: 3
   326 ;; This function calls:
   327 ;;		_rotateMotor
   328 ;;		_stopMotor
   329 ;; This function is called by:
   330 ;;		Startup code after reset
   331 ;; This function uses a non-reentrant model
   332 ;;
   333                           
   334  0017                     _main:	
   335                           ;psect for function _main
   336                           
   337  0017                     l862:	
   338                           ;incstack = 0
   339                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   340                           
   341                           
   342                           ;main.c: 68:     OPTION_REGbits.INTEDG = 1;
   343  0017  1683               	bsf	3,5	;RP0=1, select bank1
   344  0018  1303               	bcf	3,6	;RP1=0, select bank1
   345  0019  1701               	bsf	1,6	;volatile
   346                           
   347                           ;main.c: 69:     INTCONbits.GIE = 1;
   348  001A  178B               	bsf	11,7	;volatile
   349                           
   350                           ;main.c: 70:     INTCONbits.INTE = 1;
   351  001B  160B               	bsf	11,4	;volatile
   352  001C                     l864:
   353                           
   354                           ;main.c: 72:     TRISB = 0XFF;
   355  001C  30FF               	movlw	255
   356  001D  0086               	movwf	6	;volatile
   357  001E                     l866:
   358                           
   359                           ;main.c: 73:     PORTB = 0;
   360  001E  1283               	bcf	3,5	;RP0=0, select bank0
   361  001F  1303               	bcf	3,6	;RP1=0, select bank0
   362  0020  0186               	clrf	6	;volatile
   363  0021                     l868:
   364                           
   365                           ;main.c: 75:     TRISC = 0XF0;
   366  0021  30F0               	movlw	240
   367  0022  1683               	bsf	3,5	;RP0=1, select bank1
   368  0023  1303               	bcf	3,6	;RP1=0, select bank1
   369  0024  0087               	movwf	7	;volatile
   370                           
   371                           ;main.c: 76:     PORTC = 0;
   372  0025  1283               	bcf	3,5	;RP0=0, select bank0
   373  0026  1303               	bcf	3,6	;RP1=0, select bank0
   374  0027  0187               	clrf	7	;volatile
   375  0028                     l46:	
   376                           ;main.c: 77:     while(1){
   377                           
   378                           
   379                           ;main.c: 78:         trem_passando = 0;
   380  0028  1283               	bcf	3,5	;RP0=0, select bank0
   381  0029  1303               	bcf	3,6	;RP1=0, select bank0
   382  002A  01AD               	clrf	_trem_passando
   383  002B  01AE               	clrf	_trem_passando+1
   384  002C                     l870:
   385                           
   386                           ;main.c: 79:         if(PORTCbits.RC5 && SA_press == 0){
   387  002C  1E87               	btfss	7,5	;volatile
   388  002D  282F               	goto	u311
   389  002E  2830               	goto	u310
   390  002F                     u311:
   391  002F  28A0               	goto	l47
   392  0030                     u310:
   393  0030                     l872:
   394  0030  082F               	movf	_SA_press,w
   395  0031  0430               	iorwf	_SA_press+1,w
   396  0032  1D03               	btfss	3,2
   397  0033  2835               	goto	u321
   398  0034  2836               	goto	u320
   399  0035                     u321:
   400  0035  28A0               	goto	l47
   401  0036                     u320:
   402  0036                     l874:
   403                           
   404                           ;main.c: 80:             SA_press = 1;
   405  0036  3001               	movlw	1
   406  0037  00AF               	movwf	_SA_press
   407  0038  3000               	movlw	0
   408  0039  00B0               	movwf	_SA_press+1
   409  003A                     l876:
   410                           
   411                           ;main.c: 81:             rotateMotor('A');
   412  003A  3041               	movlw	65
   413  003B  120A  118A  20AA  120A  118A  	fcall	_rotateMotor
   414                           
   415                           ;main.c: 82:             while(PORTCbits.RC7 == 0){
   416  0040  2848               	goto	l48
   417  0041                     l878:
   418                           
   419                           ;main.c: 83:                 if(trem_passando){
   420  0041  082D               	movf	_trem_passando,w
   421  0042  042E               	iorwf	_trem_passando+1,w
   422  0043  1903               	btfsc	3,2
   423  0044  2846               	goto	u331
   424  0045  2847               	goto	u330
   425  0046                     u331:
   426  0046  2848               	goto	l48
   427  0047                     u330:
   428  0047  284E               	goto	l882
   429  0048                     l48:	
   430                           ;main.c: 86:             }
   431                           
   432                           
   433                           ;main.c: 82:             while(PORTCbits.RC7 == 0){
   434  0048  1283               	bcf	3,5	;RP0=0, select bank0
   435  0049  1303               	bcf	3,6	;RP1=0, select bank0
   436  004A  1F87               	btfss	7,7	;volatile
   437  004B  284D               	goto	u341
   438  004C  284E               	goto	u340
   439  004D                     u341:
   440  004D  2841               	goto	l878
   441  004E                     u340:
   442  004E                     l882:
   443                           
   444                           ;main.c: 87:             if(trem_passando){
   445  004E  082D               	movf	_trem_passando,w
   446  004F  042E               	iorwf	_trem_passando+1,w
   447  0050  1903               	btfsc	3,2
   448  0051  2853               	goto	u351
   449  0052  2854               	goto	u350
   450  0053                     u351:
   451  0053  2855               	goto	l886
   452  0054                     u350:
   453  0054  28A7               	goto	l64
   454  0055                     l886:
   455                           
   456                           ;main.c: 90:             stopMotor();
   457  0055  120A  118A  2159  120A  118A  	fcall	_stopMotor
   458  005A                     l888:
   459                           
   460                           ;main.c: 91:             for(int i = 0; i<20;i++){
   461  005A  1283               	bcf	3,5	;RP0=0, select bank0
   462  005B  1303               	bcf	3,6	;RP1=0, select bank0
   463  005C  01AB               	clrf	main@i
   464  005D  01AC               	clrf	main@i+1
   465  005E                     l894:
   466                           
   467                           ;main.c: 92:                 if(trem_passando){
   468  005E  1283               	bcf	3,5	;RP0=0, select bank0
   469  005F  1303               	bcf	3,6	;RP1=0, select bank0
   470  0060  082D               	movf	_trem_passando,w
   471  0061  042E               	iorwf	_trem_passando+1,w
   472  0062  1903               	btfsc	3,2
   473  0063  2865               	goto	u361
   474  0064  2866               	goto	u360
   475  0065                     u361:
   476  0065  2867               	goto	l898
   477  0066                     u360:
   478  0066  2886               	goto	l902
   479  0067                     l898:
   480                           
   481                           ;main.c: 95:                 _delay((unsigned long)((100)*(4000000/4000.0)));
   482  0067  3082               	movlw	130
   483  0068  1283               	bcf	3,5	;RP0=0, select bank0
   484  0069  1303               	bcf	3,6	;RP1=0, select bank0
   485  006A  00AA               	movwf	??_main+1
   486  006B  30DD               	movlw	221
   487  006C  00A9               	movwf	??_main
   488  006D                     u417:
   489  006D  0BA9               	decfsz	??_main,f
   490  006E  286D               	goto	u417
   491  006F  0BAA               	decfsz	??_main+1,f
   492  0070  286D               	goto	u417
   493                           
   494                           ;main.c: 96:             }
   495  0071  3001               	movlw	1
   496  0072  1283               	bcf	3,5	;RP0=0, select bank0
   497  0073  1303               	bcf	3,6	;RP1=0, select bank0
   498  0074  07AB               	addwf	main@i,f
   499  0075  1803               	skipnc
   500  0076  0AAC               	incf	main@i+1,f
   501  0077  3000               	movlw	0
   502  0078  07AC               	addwf	main@i+1,f
   503  0079                     l900:
   504  0079  082C               	movf	main@i+1,w
   505  007A  3A80               	xorlw	128
   506  007B  00FF               	movwf	btemp+1
   507  007C  3080               	movlw	128
   508  007D  027F               	subwf	btemp+1,w
   509  007E  1D03               	skipz
   510  007F  2882               	goto	u375
   511  0080  3014               	movlw	20
   512  0081  022B               	subwf	main@i,w
   513  0082                     u375:
   514  0082  1C03               	skipc
   515  0083  2885               	goto	u371
   516  0084  2886               	goto	u370
   517  0085                     u371:
   518  0085  285E               	goto	l894
   519  0086                     u370:
   520  0086                     l902:
   521                           
   522                           ;main.c: 97:             rotateMotor('F');
   523  0086  3046               	movlw	70
   524  0087  120A  118A  20AA  120A  118A  	fcall	_rotateMotor
   525                           
   526                           ;main.c: 98:             while(PORTCbits.RC6 == 0){
   527  008C  2894               	goto	l57
   528  008D                     l904:
   529                           
   530                           ;main.c: 99:                 if(trem_passando){
   531  008D  082D               	movf	_trem_passando,w
   532  008E  042E               	iorwf	_trem_passando+1,w
   533  008F  1903               	btfsc	3,2
   534  0090  2892               	goto	u381
   535  0091  2893               	goto	u380
   536  0092                     u381:
   537  0092  2894               	goto	l57
   538  0093                     u380:
   539  0093  289A               	goto	l908
   540  0094                     l57:	
   541                           ;main.c: 102:             }
   542                           
   543                           
   544                           ;main.c: 98:             while(PORTCbits.RC6 == 0){
   545  0094  1283               	bcf	3,5	;RP0=0, select bank0
   546  0095  1303               	bcf	3,6	;RP1=0, select bank0
   547  0096  1F07               	btfss	7,6	;volatile
   548  0097  2899               	goto	u391
   549  0098  289A               	goto	u390
   550  0099                     u391:
   551  0099  288D               	goto	l904
   552  009A                     u390:
   553  009A                     l908:
   554                           
   555                           ;main.c: 103:             stopMotor();
   556  009A  120A  118A  2159  120A  118A  	fcall	_stopMotor
   557                           
   558                           ;main.c: 104:         }
   559  009F  2828               	goto	l46
   560  00A0                     l47:	
   561                           ;main.c: 105:         else{
   562                           
   563                           
   564                           ;main.c: 106:             if(!PORTCbits.RC5){
   565  00A0  1A87               	btfsc	7,5	;volatile
   566  00A1  28A3               	goto	u401
   567  00A2  28A4               	goto	u400
   568  00A3                     u401:
   569  00A3  2828               	goto	l46
   570  00A4                     u400:
   571  00A4                     l910:
   572                           
   573                           ;main.c: 107:                 SA_press = 0;
   574  00A4  01AF               	clrf	_SA_press
   575  00A5  01B0               	clrf	_SA_press+1
   576  00A6  2828               	goto	l46
   577  00A7                     l64:
   578  00A7  120A  118A  280C   	ljmp	start
   579  00AA                     __end_of_main:
   580                           
   581                           	psect	text1
   582  0159                     __ptext1:	
   583 ;; *************** function _stopMotor *****************
   584 ;; Defined at:
   585 ;;		line 45 in file "main.c"
   586 ;; Parameters:    Size  Location     Type
   587 ;;		None
   588 ;; Auto vars:     Size  Location     Type
   589 ;;		None
   590 ;; Return value:  Size  Location     Type
   591 ;;                  1    wreg      void 
   592 ;; Registers used:
   593 ;;		None
   594 ;; Tracked objects:
   595 ;;		On entry : 0/0
   596 ;;		On exit  : 0/0
   597 ;;		Unchanged: 0/0
   598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   599 ;;      Params:         0       0       0       0       0
   600 ;;      Locals:         0       0       0       0       0
   601 ;;      Temps:          0       0       0       0       0
   602 ;;      Totals:         0       0       0       0       0
   603 ;;Total ram usage:        0 bytes
   604 ;; Hardware stack levels used: 1
   605 ;; Hardware stack levels required when called: 2
   606 ;; This function calls:
   607 ;;		Nothing
   608 ;; This function is called by:
   609 ;;		_main
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613  0159                     _stopMotor:	
   614                           ;psect for function _stopMotor
   615                           
   616  0159                     l814:	
   617                           ;incstack = 0
   618                           ; Regs used in _stopMotor: []
   619                           
   620                           
   621                           ;main.c: 46:     PORTCbits.RC1 = 0;
   622  0159  1283               	bcf	3,5	;RP0=0, select bank0
   623  015A  1303               	bcf	3,6	;RP1=0, select bank0
   624  015B  1087               	bcf	7,1	;volatile
   625                           
   626                           ;main.c: 47:     PORTCbits.RC0 = 0;
   627  015C  1007               	bcf	7,0	;volatile
   628                           
   629                           ;main.c: 49:     PORTCbits.RC3 = 0;
   630  015D  1187               	bcf	7,3	;volatile
   631                           
   632                           ;main.c: 50:     PORTCbits.RC2 = 0;
   633  015E  1107               	bcf	7,2	;volatile
   634  015F                     l28:
   635  015F  0008               	return
   636  0160                     __end_of_stopMotor:
   637                           
   638                           	psect	text2
   639  00AA                     __ptext2:	
   640 ;; *************** function _rotateMotor *****************
   641 ;; Defined at:
   642 ;;		line 35 in file "main.c"
   643 ;; Parameters:    Size  Location     Type
   644 ;;  direction       1    wreg     unsigned char 
   645 ;; Auto vars:     Size  Location     Type
   646 ;;  direction       1    8[BANK0 ] unsigned char 
   647 ;;  fechando        2    6[BANK0 ] int 
   648 ;;  abrindo         2    4[BANK0 ] int 
   649 ;; Return value:  Size  Location     Type
   650 ;;                  1    wreg      void 
   651 ;; Registers used:
   652 ;;		wreg, status,2, status,0
   653 ;; Tracked objects:
   654 ;;		On entry : 0/0
   655 ;;		On exit  : 0/0
   656 ;;		Unchanged: 0/0
   657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   658 ;;      Params:         0       0       0       0       0
   659 ;;      Locals:         0       7       0       0       0
   660 ;;      Temps:          0       2       0       0       0
   661 ;;      Totals:         0       9       0       0       0
   662 ;;Total ram usage:        9 bytes
   663 ;; Hardware stack levels used: 1
   664 ;; Hardware stack levels required when called: 2
   665 ;; This function calls:
   666 ;;		Nothing
   667 ;; This function is called by:
   668 ;;		_main
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672  00AA                     _rotateMotor:	
   673                           ;psect for function _rotateMotor
   674                           
   675                           
   676                           ;incstack = 0
   677                           ; Regs used in _rotateMotor: [wreg+status,2+status,0]
   678                           ;rotateMotor@direction stored from wreg
   679  00AA  1283               	bcf	3,5	;RP0=0, select bank0
   680  00AB  1303               	bcf	3,6	;RP1=0, select bank0
   681  00AC  00A8               	movwf	rotateMotor@direction
   682  00AD                     l784:
   683                           
   684                           ;main.c: 36:     int abrindo = direction == 'A' || direction == 'a';
   685  00AD  01A2               	clrf	_rotateMotor$115
   686  00AE  0AA2               	incf	_rotateMotor$115,f
   687  00AF                     l786:
   688  00AF  3041               	movlw	65
   689  00B0  0628               	xorwf	rotateMotor@direction,w
   690  00B1  1903               	btfsc	3,2
   691  00B2  28B4               	goto	u211
   692  00B3  28B5               	goto	u210
   693  00B4                     u211:
   694  00B4  28BC               	goto	l792
   695  00B5                     u210:
   696  00B5                     l788:
   697  00B5  3061               	movlw	97
   698  00B6  0628               	xorwf	rotateMotor@direction,w
   699  00B7  1903               	btfsc	3,2
   700  00B8  28BA               	goto	u221
   701  00B9  28BB               	goto	u220
   702  00BA                     u221:
   703  00BA  28BC               	goto	l792
   704  00BB                     u220:
   705  00BB                     l790:
   706  00BB  01A2               	clrf	_rotateMotor$115
   707  00BC                     l792:
   708  00BC  0822               	movf	_rotateMotor$115,w
   709  00BD  00A0               	movwf	??_rotateMotor
   710  00BE  01A1               	clrf	??_rotateMotor+1
   711  00BF  0820               	movf	??_rotateMotor,w
   712  00C0  00A4               	movwf	rotateMotor@abrindo
   713  00C1  0821               	movf	??_rotateMotor+1,w
   714  00C2  00A5               	movwf	rotateMotor@abrindo+1
   715  00C3                     l794:
   716                           
   717                           ;main.c: 37:     int fechando = direction == 'F' || direction == 'f';
   718  00C3  01A3               	clrf	_rotateMotor$117
   719  00C4  0AA3               	incf	_rotateMotor$117,f
   720  00C5                     l796:
   721  00C5  3046               	movlw	70
   722  00C6  0628               	xorwf	rotateMotor@direction,w
   723  00C7  1903               	btfsc	3,2
   724  00C8  28CA               	goto	u231
   725  00C9  28CB               	goto	u230
   726  00CA                     u231:
   727  00CA  28D2               	goto	l802
   728  00CB                     u230:
   729  00CB                     l798:
   730  00CB  3066               	movlw	102
   731  00CC  0628               	xorwf	rotateMotor@direction,w
   732  00CD  1903               	btfsc	3,2
   733  00CE  28D0               	goto	u241
   734  00CF  28D1               	goto	u240
   735  00D0                     u241:
   736  00D0  28D2               	goto	l802
   737  00D1                     u240:
   738  00D1                     l800:
   739  00D1  01A3               	clrf	_rotateMotor$117
   740  00D2                     l802:
   741  00D2  0823               	movf	_rotateMotor$117,w
   742  00D3  00A0               	movwf	??_rotateMotor
   743  00D4  01A1               	clrf	??_rotateMotor+1
   744  00D5  0820               	movf	??_rotateMotor,w
   745  00D6  00A6               	movwf	rotateMotor@fechando
   746  00D7  0821               	movf	??_rotateMotor+1,w
   747  00D8  00A7               	movwf	rotateMotor@fechando+1
   748  00D9                     l804:
   749                           
   750                           ;main.c: 38:     PORTCbits.RC1 = abrindo;
   751  00D9  0C24               	rrf	rotateMotor@abrindo,w
   752  00DA  1C03               	skipc
   753  00DB  1087               	bcf	7,1	;volatile
   754  00DC  1803               	skipnc
   755  00DD  1487               	bsf	7,1	;volatile
   756  00DE                     l806:
   757                           
   758                           ;main.c: 39:     PORTCbits.RC3 = abrindo;
   759  00DE  0C24               	rrf	rotateMotor@abrindo,w
   760  00DF  1C03               	skipc
   761  00E0  1187               	bcf	7,3	;volatile
   762  00E1  1803               	skipnc
   763  00E2  1587               	bsf	7,3	;volatile
   764  00E3                     l808:
   765                           
   766                           ;main.c: 40:     PORTCbits.RC0 = fechando;
   767  00E3  0C26               	rrf	rotateMotor@fechando,w
   768  00E4  1C03               	skipc
   769  00E5  1007               	bcf	7,0	;volatile
   770  00E6  1803               	skipnc
   771  00E7  1407               	bsf	7,0	;volatile
   772  00E8                     l810:
   773                           
   774                           ;main.c: 41:     PORTCbits.RC2 = fechando;
   775  00E8  0C26               	rrf	rotateMotor@fechando,w
   776  00E9  1C03               	skipc
   777  00EA  1107               	bcf	7,2	;volatile
   778  00EB  1803               	skipnc
   779  00EC  1507               	bsf	7,2	;volatile
   780  00ED                     l25:
   781  00ED  0008               	return
   782  00EE                     __end_of_rotateMotor:
   783                           
   784                           	psect	text3
   785  0132                     __ptext3:	
   786 ;; *************** function _tremInterruption *****************
   787 ;; Defined at:
   788 ;;		line 54 in file "main.c"
   789 ;; Parameters:    Size  Location     Type
   790 ;;		None
   791 ;; Auto vars:     Size  Location     Type
   792 ;;		None
   793 ;; Return value:  Size  Location     Type
   794 ;;                  1    wreg      void 
   795 ;; Registers used:
   796 ;;		wreg, status,2, status,0, pclath, cstack
   797 ;; Tracked objects:
   798 ;;		On entry : 0/0
   799 ;;		On exit  : 0/0
   800 ;;		Unchanged: 0/0
   801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   802 ;;      Params:         0       0       0       0       0
   803 ;;      Locals:         0       0       0       0       0
   804 ;;      Temps:          2       0       0       0       0
   805 ;;      Totals:         2       0       0       0       0
   806 ;;Total ram usage:        2 bytes
   807 ;; Hardware stack levels used: 1
   808 ;; Hardware stack levels required when called: 1
   809 ;; This function calls:
   810 ;;		i1_rotateMotor
   811 ;;		i1_stopMotor
   812 ;; This function is called by:
   813 ;;		Interrupt level 1
   814 ;; This function uses a non-reentrant model
   815 ;;
   816                           
   817  0132                     _tremInterruption:	
   818                           ;psect for function _tremInterruption
   819                           
   820  0132                     i1l848:
   821                           
   822                           ;main.c: 56:     if(INTF){
   823  0132  1C8B               	btfss	11,1	;volatile
   824  0133  2935               	goto	u29_21
   825  0134  2936               	goto	u29_20
   826  0135                     u29_21:
   827  0135  2952               	goto	i1l41
   828  0136                     u29_20:
   829  0136                     i1l850:
   830                           
   831                           ;main.c: 57:         trem_passando = 1;
   832  0136  3001               	movlw	1
   833  0137  1283               	bcf	3,5	;RP0=0, select bank0
   834  0138  1303               	bcf	3,6	;RP1=0, select bank0
   835  0139  00AD               	movwf	_trem_passando
   836  013A  3000               	movlw	0
   837  013B  00AE               	movwf	_trem_passando+1
   838  013C                     i1l852:
   839                           
   840                           ;main.c: 58:         rotateMotor('F');
   841  013C  3046               	movlw	70
   842  013D  120A  118A  20EE  120A  118A  	fcall	i1_rotateMotor
   843  0142                     i1l38:	
   844                           ;main.c: 59:         while(PORTCbits.RC6 == 0);
   845                           
   846  0142  1283               	bcf	3,5	;RP0=0, select bank0
   847  0143  1303               	bcf	3,6	;RP1=0, select bank0
   848  0144  1F07               	btfss	7,6	;volatile
   849  0145  2947               	goto	u30_21
   850  0146  2948               	goto	u30_20
   851  0147                     u30_21:
   852  0147  2942               	goto	i1l38
   853  0148                     u30_20:
   854  0148                     i1l854:
   855                           
   856                           ;main.c: 60:         stopMotor();
   857  0148  120A  118A  2160  120A  118A  	fcall	i1_stopMotor
   858  014D                     i1l856:
   859                           
   860                           ;main.c: 61:         SA_press = 0;
   861  014D  1283               	bcf	3,5	;RP0=0, select bank0
   862  014E  1303               	bcf	3,6	;RP1=0, select bank0
   863  014F  01AF               	clrf	_SA_press
   864  0150  01B0               	clrf	_SA_press+1
   865  0151                     i1l858:
   866                           
   867                           ;main.c: 62:         INTCONbits.INTF = 0;
   868  0151  108B               	bcf	11,1	;volatile
   869  0152                     i1l41:
   870  0152  087A               	movf	??_tremInterruption+1,w
   871  0153  008A               	movwf	10
   872  0154  0E79               	swapf	??_tremInterruption,w
   873  0155  0083               	movwf	3
   874  0156  0EFE               	swapf	btemp,f
   875  0157  0E7E               	swapf	btemp,w
   876  0158  0009               	retfie
   877  0159                     __end_of_tremInterruption:
   878                           
   879                           	psect	intentry
   880  0004                     __pintentry:	
   881                           ;incstack = 0
   882                           ; Regs used in _tremInterruption: [wreg+status,2+status,0+pclath+cstack]
   883                           
   884  0004                     interrupt_function:
   885  007E                     saved_w	set	btemp
   886  0004  00FE               	movwf	btemp
   887  0005  0E03               	swapf	3,w
   888  0006  00F9               	movwf	??_tremInterruption
   889  0007  080A               	movf	10,w
   890  0008  00FA               	movwf	??_tremInterruption+1
   891  0009  120A  118A  2932   	ljmp	_tremInterruption
   892                           
   893                           	psect	text4
   894  0160                     __ptext4:	
   895 ;; *************** function i1_stopMotor *****************
   896 ;; Defined at:
   897 ;;		line 45 in file "main.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;		None
   900 ;; Auto vars:     Size  Location     Type
   901 ;;		None
   902 ;; Return value:  Size  Location     Type
   903 ;;                  1    wreg      void 
   904 ;; Registers used:
   905 ;;		None
   906 ;; Tracked objects:
   907 ;;		On entry : 0/0
   908 ;;		On exit  : 0/0
   909 ;;		Unchanged: 0/0
   910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   911 ;;      Params:         0       0       0       0       0
   912 ;;      Locals:         0       0       0       0       0
   913 ;;      Temps:          0       0       0       0       0
   914 ;;      Totals:         0       0       0       0       0
   915 ;;Total ram usage:        0 bytes
   916 ;; Hardware stack levels used: 1
   917 ;; This function calls:
   918 ;;		Nothing
   919 ;; This function is called by:
   920 ;;		_tremInterruption
   921 ;; This function uses a non-reentrant model
   922 ;;
   923                           
   924  0160                     i1_stopMotor:	
   925                           ;psect for function i1_stopMotor
   926                           
   927  0160                     i1l846:	
   928                           ;incstack = 0
   929                           ; Regs used in i1_stopMotor: []
   930                           
   931                           
   932                           ;main.c: 46:     PORTCbits.RC1 = 0;
   933  0160  1283               	bcf	3,5	;RP0=0, select bank0
   934  0161  1303               	bcf	3,6	;RP1=0, select bank0
   935  0162  1087               	bcf	7,1	;volatile
   936                           
   937                           ;main.c: 47:     PORTCbits.RC0 = 0;
   938  0163  1007               	bcf	7,0	;volatile
   939                           
   940                           ;main.c: 49:     PORTCbits.RC3 = 0;
   941  0164  1187               	bcf	7,3	;volatile
   942                           
   943                           ;main.c: 50:     PORTCbits.RC2 = 0;
   944  0165  1107               	bcf	7,2	;volatile
   945  0166                     i1l28:
   946  0166  0008               	return
   947  0167                     __end_ofi1_stopMotor:
   948                           
   949                           	psect	text5
   950  00EE                     __ptext5:	
   951 ;; *************** function i1_rotateMotor *****************
   952 ;; Defined at:
   953 ;;		line 35 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;  direction       1    wreg     unsigned char 
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  direction       1    8[COMMON] unsigned char 
   958 ;;  fechando        2    6[COMMON] int 
   959 ;;  abrindo         2    4[COMMON] int 
   960 ;; Return value:  Size  Location     Type
   961 ;;                  1    wreg      void 
   962 ;; Registers used:
   963 ;;		wreg, status,2, status,0
   964 ;; Tracked objects:
   965 ;;		On entry : 0/0
   966 ;;		On exit  : 0/0
   967 ;;		Unchanged: 0/0
   968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   969 ;;      Params:         0       0       0       0       0
   970 ;;      Locals:         7       0       0       0       0
   971 ;;      Temps:          2       0       0       0       0
   972 ;;      Totals:         9       0       0       0       0
   973 ;;Total ram usage:        9 bytes
   974 ;; Hardware stack levels used: 1
   975 ;; This function calls:
   976 ;;		Nothing
   977 ;; This function is called by:
   978 ;;		_tremInterruption
   979 ;; This function uses a non-reentrant model
   980 ;;
   981                           
   982  00EE                     i1_rotateMotor:	
   983                           ;psect for function i1_rotateMotor
   984                           
   985                           
   986                           ;incstack = 0
   987                           ; Regs used in i1_rotateMotor: [wreg+status,2+status,0]
   988                           ;i1rotateMotor@direction stored from wreg
   989  00EE  00F8               	movwf	i1rotateMotor@direction
   990  00EF                     i1l816:
   991                           
   992                           ;main.c: 36:     int abrindo = direction == 'A' || direction == 'a';
   993  00EF  01F2               	clrf	i1_rotateMotor$115
   994  00F0  0AF2               	incf	i1_rotateMotor$115,f
   995  00F1                     i1l818:
   996  00F1  3041               	movlw	65
   997  00F2  0678               	xorwf	i1rotateMotor@direction,w
   998  00F3  1903               	btfsc	3,2
   999  00F4  28F6               	goto	u25_21
  1000  00F5  28F7               	goto	u25_20
  1001  00F6                     u25_21:
  1002  00F6  28FE               	goto	i1l824
  1003  00F7                     u25_20:
  1004  00F7                     i1l820:
  1005  00F7  3061               	movlw	97
  1006  00F8  0678               	xorwf	i1rotateMotor@direction,w
  1007  00F9  1903               	btfsc	3,2
  1008  00FA  28FC               	goto	u26_21
  1009  00FB  28FD               	goto	u26_20
  1010  00FC                     u26_21:
  1011  00FC  28FE               	goto	i1l824
  1012  00FD                     u26_20:
  1013  00FD                     i1l822:
  1014  00FD  01F2               	clrf	i1_rotateMotor$115
  1015  00FE                     i1l824:
  1016  00FE  0872               	movf	i1_rotateMotor$115,w
  1017  00FF  00F0               	movwf	??i1_rotateMotor
  1018  0100  01F1               	clrf	??i1_rotateMotor+1
  1019  0101  0870               	movf	??i1_rotateMotor,w
  1020  0102  00F4               	movwf	i1rotateMotor@abrindo
  1021  0103  0871               	movf	??i1_rotateMotor+1,w
  1022  0104  00F5               	movwf	i1rotateMotor@abrindo+1
  1023  0105                     i1l826:
  1024                           
  1025                           ;main.c: 37:     int fechando = direction == 'F' || direction == 'f';
  1026  0105  01F3               	clrf	i1_rotateMotor$117
  1027  0106  0AF3               	incf	i1_rotateMotor$117,f
  1028  0107                     i1l828:
  1029  0107  3046               	movlw	70
  1030  0108  0678               	xorwf	i1rotateMotor@direction,w
  1031  0109  1903               	btfsc	3,2
  1032  010A  290C               	goto	u27_21
  1033  010B  290D               	goto	u27_20
  1034  010C                     u27_21:
  1035  010C  2914               	goto	i1l834
  1036  010D                     u27_20:
  1037  010D                     i1l830:
  1038  010D  3066               	movlw	102
  1039  010E  0678               	xorwf	i1rotateMotor@direction,w
  1040  010F  1903               	btfsc	3,2
  1041  0110  2912               	goto	u28_21
  1042  0111  2913               	goto	u28_20
  1043  0112                     u28_21:
  1044  0112  2914               	goto	i1l834
  1045  0113                     u28_20:
  1046  0113                     i1l832:
  1047  0113  01F3               	clrf	i1_rotateMotor$117
  1048  0114                     i1l834:
  1049  0114  0873               	movf	i1_rotateMotor$117,w
  1050  0115  00F0               	movwf	??i1_rotateMotor
  1051  0116  01F1               	clrf	??i1_rotateMotor+1
  1052  0117  0870               	movf	??i1_rotateMotor,w
  1053  0118  00F6               	movwf	i1rotateMotor@fechando
  1054  0119  0871               	movf	??i1_rotateMotor+1,w
  1055  011A  00F7               	movwf	i1rotateMotor@fechando+1
  1056  011B                     i1l836:
  1057                           
  1058                           ;main.c: 38:     PORTCbits.RC1 = abrindo;
  1059  011B  0C74               	rrf	i1rotateMotor@abrindo,w
  1060  011C  1283               	bcf	3,5	;RP0=0, select bank0
  1061  011D  1303               	bcf	3,6	;RP1=0, select bank0
  1062  011E  1C03               	skipc
  1063  011F  1087               	bcf	7,1	;volatile
  1064  0120  1803               	skipnc
  1065  0121  1487               	bsf	7,1	;volatile
  1066  0122                     i1l838:
  1067                           
  1068                           ;main.c: 39:     PORTCbits.RC3 = abrindo;
  1069  0122  0C74               	rrf	i1rotateMotor@abrindo,w
  1070  0123  1C03               	skipc
  1071  0124  1187               	bcf	7,3	;volatile
  1072  0125  1803               	skipnc
  1073  0126  1587               	bsf	7,3	;volatile
  1074  0127                     i1l840:
  1075                           
  1076                           ;main.c: 40:     PORTCbits.RC0 = fechando;
  1077  0127  0C76               	rrf	i1rotateMotor@fechando,w
  1078  0128  1C03               	skipc
  1079  0129  1007               	bcf	7,0	;volatile
  1080  012A  1803               	skipnc
  1081  012B  1407               	bsf	7,0	;volatile
  1082  012C                     i1l842:
  1083                           
  1084                           ;main.c: 41:     PORTCbits.RC2 = fechando;
  1085  012C  0C76               	rrf	i1rotateMotor@fechando,w
  1086  012D  1C03               	skipc
  1087  012E  1107               	bcf	7,2	;volatile
  1088  012F  1803               	skipnc
  1089  0130  1507               	bsf	7,2	;volatile
  1090  0131                     i1l25:
  1091  0131  0008               	return
  1092  0132                     __end_ofi1_rotateMotor:
  1093  007E                     btemp	set	126	;btemp
  1094  007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80     13      17
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _tremInterruption in COMMON

    _tremInterruption->i1_rotateMotor

Critical Paths under _main in BANK0

    _main->_rotateMotor

Critical Paths under _tremInterruption in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tremInterruption in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tremInterruption in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tremInterruption in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     272
                                              9 BANK0      4     4      0
                        _rotateMotor
                          _stopMotor
 ---------------------------------------------------------------------------------
 (1) _stopMotor                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rotateMotor                                          9     9      0     226
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _tremInterruption                                     2     2      0     226
                                              9 COMMON     2     2      0
                      i1_rotateMotor
                        i1_stopMotor
 ---------------------------------------------------------------------------------
 (3) i1_stopMotor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) i1_rotateMotor                                        9     9      0     226
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _rotateMotor
   _stopMotor

 _tremInterruption (ROOT)
   i1_rotateMotor
   i1_stopMotor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      1C       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      D      11       5       21.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      1C      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Feb 12 19:23:07 2022

             _rotateMotor 00AA                        l25 00ED                        l28 015F  
                      l46 0028                        l47 00A0                        l64 00A7  
                      l48 0048                        l57 0094                       l800 00D1  
                     l810 00E8                       l802 00D2                       l804 00D9  
                     l900 0079                       l806 00DE                       l814 0159  
                     l910 00A4                       l902 0086                       l808 00E3  
                     l904 008D                       l908 009A                       l790 00BB  
                     l870 002C                       l862 0017                       l792 00BC  
                     l784 00AD                       l872 0030                       l864 001C  
                     l794 00C3                       l786 00AF                       l882 004E  
                     l874 0036                       l866 001E                       l796 00C5  
                     l788 00B5                       l876 003A                       l868 0021  
                     l798 00CB                       l894 005E                       l886 0055  
                     l878 0041                       l888 005A                       l898 0067  
                     u210 00B5                       u211 00B4                       u220 00BB  
                     u221 00BA                       u230 00CB                       u310 0030  
                     u231 00CA                       u311 002F                       u240 00D1  
                     u400 00A4                       u320 0036                       u241 00D0  
                     u401 00A3                       u321 0035                       u330 0047  
                     u331 0046                       u340 004E                       u341 004D  
                     u350 0054                       u351 0053                       u360 0066  
                     u417 006D                       u361 0065                       u370 0086  
                     u371 0085                       u380 0093                       u381 0092  
                     u390 009A                       u391 0099                       u375 0082  
     __end_ofi1_stopMotor 0167                      _INTF 0059                      i1l25 0131  
                    i1l41 0152                      i1l28 0166                      i1l38 0142  
                    _main 0017                      btemp 007E                      start 000C  
           _trem_passando 002D     __end_ofi1_rotateMotor 0132       rotateMotor@fechando 0026  
                   ?_main 0070                     i1l820 00F7                     i1l830 010D  
                   i1l822 00FD                     i1l840 0127                     i1l832 0113  
                   i1l824 00FE                     i1l816 00EF                     i1l842 012C  
                   i1l834 0114                     i1l826 0105                     i1l818 00F1  
                   i1l850 0136                     i1l836 011B                     i1l828 0107  
                   i1l852 013C                     i1l838 0122                     i1l846 0160  
                   i1l854 0148                     i1l856 014D                     i1l848 0132  
                   i1l858 0151                     u30_20 0148                     u30_21 0147  
                   u25_20 00F7                     u25_21 00F6                     u26_20 00FD  
                   u26_21 00FC                     u27_20 010D                     u27_21 010C  
                   _PORTB 0006                     _PORTC 0007                     u28_20 0113  
                   u28_21 0112                     u29_20 0136                     u29_21 0135  
                   _TRISB 0086                     _TRISC 0087    i1rotateMotor@direction 0078  
         _rotateMotor$115 0022           _rotateMotor$117 0023                     main@i 002B  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 000F              __end_of_main 00AA               i1_stopMotor 0160  
__end_of_tremInterruption 0159                    ??_main 0029      rotateMotor@direction 0028  
                  saved_w 007E   __end_of__initialization 0013      i1rotateMotor@abrindo 0074  
          __pcstackCOMMON 0070              ?_rotateMotor 0070            _OPTION_REGbits 0081  
              __pbssBANK0 002F                __pmaintext 0017                __pintentry 0004  
            ?i1_stopMotor 0070         ?_tremInterruption 0070                   __ptext1 0159  
                 __ptext2 00AA                   __ptext3 0132                   __ptext4 0160  
                 __ptext5 00EE        ??_tremInterruption 0079      end_of_initialization 0013  
       __end_of_stopMotor 0160                 _PORTCbits 0007        rotateMotor@abrindo 0024  
   i1rotateMotor@fechando 0076             i1_rotateMotor 00EE       start_initialization 000F  
          ?i1_rotateMotor 0070                 ___latbits 0002             __pcstackBANK0 0020  
               __pnvBANK0 002D         i1_rotateMotor$115 0072         i1_rotateMotor$117 0073  
       interrupt_function 0004           ??i1_rotateMotor 0070                  _SA_press 002F  
               _stopMotor 0159             ??_rotateMotor 0020                ?_stopMotor 0070  
     __end_of_rotateMotor 00EE                _INTCONbits 000B                  intlevel1 0000  
        _tremInterruption 0132             ??i1_stopMotor 0070               ??_stopMotor 0020  
